{"ast":null,"code":"var _jsxFileName = \"E:\\\\study\\\\todo-list\\\\leekyoyoung\\\\src\\\\components\\\\common\\\\TabContents\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport localStorageController from '@/module/localstorage';\nimport * as t from \"@/components/common//TabContents/style\";\nimport uuid from 'react-uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TabContents = props => {\n  _s();\n  // const [변수명, 함수 ] = useState<type>(); \n  // 변수의 값을 업데이트 하기 위해선 함수가 호출 되어야 함.\n\n  const [inputValue, setInputValue] = useState(\"\"); // 문자열 inputValue를 초기값 설정 \n  const [inputDate, setInputDate] = useState(\"\");\n  // const [listItems, setListItems] = useState<ListItem[]>([]); \n  // 배열 listItems 초기값 설정\\\n  const [listItems, setListItems] = useState(() => {\n    const saved = localStorageController.getItem('todolist');\n    if (saved !== null) {\n      return saved;\n    } else {\n      return []; // ListItem[] 타입으로 반환합니다.\n    }\n  });\n\n  // const [nextId, setNextId] = useState<number>(1); // 넘버 nextId 초기값 설정\n  const [nextId, setNextId] = useState(() => {\n    const maxId = Math.max(...listItems.map(item => item.id));\n    return maxId > 0 ? maxId + 1 : 1;\n  });\n  const [checked] = useState(false);\n\n  /*\r\n      *input 값이 변경될 때마다 호출되는 함수\r\n      *event: React.ChangeEvent<HTMLInputElement>\r\n      *event: any 타입도 가능 하나 남용하면 타입스크립트의 장점인 안정성과 가독성을 상실함\r\n      *리엑트에서 input의 요소값이 변경될 때 발생하는 이벤트를 다루는 타입으로  event.target.value 속성 을 가지고 있다\r\n  */\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleClick = () => {\n    const currentDate = new Date();\n    const formattedDate = currentDate.toLocaleString('ko-KR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour12: false,\n      hour: 'numeric',\n      minute: 'numeric'\n    });\n    setInputDate(formattedDate);\n  };\n\n  // 폼 제출 시 호출되는 함수\n  const handleFormSubmit = e => {\n    e.preventDefault(); // 폼 제출 기본 동작 막기\n    const newItem = {\n      id: uuid(),\n      text: inputValue,\n      checked: checked,\n      inputDate: inputDate\n    };\n    // newItem.text가 빈 문자열인 경우 추가하지 않음\n    // trim()은 공백을 제거한 값을 반환\n    if (!newItem.text.trim()) {\n      return;\n    }\n    setListItems([...listItems, newItem]); // 새로운 li 엘리먼트 추가\n    // listItem의 배열의 상태로 업데이트 함\n\n    setInputValue(\"\"); // input 값 초기화\n    setNextId(nextId);\n    // 다음 id 값 업데이트\n    // TodoItem 의 key 값이 1씩 올라 감 *고유번호\n  };\n\n  // li 삭제 버튼 클릭 시 호출되는 함수\n  const handleDeleteButtonClick = id => {\n    const updatedListItems = listItems.filter(item => item.id !== id);\n    // listItems에서 id와 일치하는 아이템을 제외한 새로운 배열을 생성\n    // item.id !== id 조건을 만족하는 요소만 남겨둠\n    setListItems(updatedListItems);\n    // listItem의 배열 상태를 undatedListItems 배열로 업데이트 함\n  };\n\n  const onChageChecked = e => {\n    const id = Number(e.target.value);\n    setListItems(listItems.map(item => item.id === id ? {\n      ...item,\n      checked: !item.checked\n    } : item));\n  };\n  useEffect(() => {\n    localStorageController.setItem(\"todolist\", listItems);\n    setListItems(listItems);\n  }, [listItems]);\n  return /*#__PURE__*/_jsxDEV(t.Container, {\n    children: [/*#__PURE__*/_jsxDEV(t.InputWrapper, {\n      onSubmit: handleFormSubmit\n      // onSubmit 은 form요소의 이벤트 핸들러 함수를 등록하는 것을 의미함\n      // form 요소에서 이벤트가 발생하면 기본적으로 페이지가 다시 로드 되는데 \n      // 이를 방지하고자 함수를 등록시킴\n      ,\n      children: [/*#__PURE__*/_jsxDEV(t.TextField, {\n        type: \"text\",\n        placeholder: props.placeholder,\n        value: inputValue // 변한 값을 저장함\n        ,\n        onChange: handleInputChange // 사용자가 입력할 때 변하는 값을 받음\n        ,\n        onClick: handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(t.AddButton, {\n        type: \"submit\",\n        children: props.btntxt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(t.ContentsWrapper, {\n      id: \"todolistwrapper\",\n      children: listItems.map(item => /*#__PURE__*/_jsxDEV(t.TodoItem, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            onChange: onChageChecked,\n            checked: item.checked\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [item.text, item.inputDate && /*#__PURE__*/_jsxDEV(\"em\", {\n              children: item.inputDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 52\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(t.EditButton, {\n          children: \"\\uC218\\uC815\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(t.DelButton, {\n          onClick: () => handleDeleteButtonClick(item.id),\n          children: \"\\uC0AD\\uC81C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this)]\n      }, item, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n_s(TabContents, \"90P6/6l1T2dgJ3gPeeKYkVYBr0c=\");\n_c = TabContents;\nexport default TabContents;\nvar _c;\n$RefreshReg$(_c, \"TabContents\");","map":{"version":3,"names":["React","useEffect","useState","localStorageController","t","uuid","jsxDEV","_jsxDEV","TabContents","props","_s","inputValue","setInputValue","inputDate","setInputDate","listItems","setListItems","saved","getItem","nextId","setNextId","maxId","Math","max","map","item","id","checked","handleInputChange","e","target","value","handleClick","currentDate","Date","formattedDate","toLocaleString","year","month","day","hour12","hour","minute","handleFormSubmit","preventDefault","newItem","text","trim","handleDeleteButtonClick","updatedListItems","filter","onChageChecked","Number","setItem","Container","children","InputWrapper","onSubmit","TextField","type","placeholder","onChange","onClick","fileName","_jsxFileName","lineNumber","columnNumber","AddButton","btntxt","ContentsWrapper","TodoItem","EditButton","DelButton","_c","$RefreshReg$"],"sources":["E:/study/todo-list/leekyoyoung/src/components/common/TabContents/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ListItem } from \"@/type/todolisttype\";\r\nimport localStorageController from '@/module/localstorage';\r\nimport * as t from \"@/components/common//TabContents/style\";\r\nimport uuid from 'react-uuid'\r\n\r\ninterface MyProps {\r\n    placeholder: string;\r\n    btntxt : string;\r\n}\r\n\r\n\r\nconst TabContents = (props:MyProps) => {\r\n    // const [변수명, 함수 ] = useState<type>(); \r\n    // 변수의 값을 업데이트 하기 위해선 함수가 호출 되어야 함.\r\n\r\n    const [inputValue, setInputValue] = useState<string>(\"\"); // 문자열 inputValue를 초기값 설정 \r\n    const [inputDate, setInputDate] = useState<string>(\"\");\r\n    // const [listItems, setListItems] = useState<ListItem[]>([]); \r\n    // 배열 listItems 초기값 설정\\\r\n    const [listItems, setListItems] = useState<ListItem[]>(() => {\r\n        const saved: ListItem[] | null = localStorageController.getItem('todolist');\r\n        if (saved !== null) {\r\n            return saved;\r\n        } else {\r\n            return []; // ListItem[] 타입으로 반환합니다.\r\n        }\r\n    \r\n    });\r\n\r\n    // const [nextId, setNextId] = useState<number>(1); // 넘버 nextId 초기값 설정\r\n    const [nextId, setNextId] = useState<number>(() => {\r\n        const maxId = Math.max(...listItems.map((item) => item.id));\r\n        return maxId > 0 ? maxId + 1 : 1;\r\n    });\r\n\r\n    const [checked] = useState<boolean>(false);\r\n\r\n    /*\r\n        *input 값이 변경될 때마다 호출되는 함수\r\n        *event: React.ChangeEvent<HTMLInputElement>\r\n        *event: any 타입도 가능 하나 남용하면 타입스크립트의 장점인 안정성과 가독성을 상실함\r\n        *리엑트에서 input의 요소값이 변경될 때 발생하는 이벤트를 다루는 타입으로  event.target.value 속성 을 가지고 있다\r\n    */\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleClick = () => {\r\n        const currentDate = new Date();\r\n        const formattedDate = currentDate.toLocaleString('ko-KR', {\r\n            year: 'numeric',\r\n            month: '2-digit',\r\n            day: '2-digit',\r\n            hour12: false,\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n        });\r\n\r\n        setInputDate(formattedDate);\r\n    };\r\n\r\n    // 폼 제출 시 호출되는 함수\r\n    const handleFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault(); // 폼 제출 기본 동작 막기\r\n        const newItem: ListItem = { id: uuid(), text: inputValue, checked : checked, inputDate: inputDate};\r\n        // newItem.text가 빈 문자열인 경우 추가하지 않음\r\n        // trim()은 공백을 제거한 값을 반환\r\n        if (!newItem.text.trim()) {\r\n            return;\r\n        }\r\n        setListItems([...listItems, newItem]); // 새로운 li 엘리먼트 추가\r\n        // listItem의 배열의 상태로 업데이트 함\r\n\r\n\r\n        setInputValue(\"\"); // input 값 초기화\r\n        setNextId(nextId); \r\n        // 다음 id 값 업데이트\r\n        // TodoItem 의 key 값이 1씩 올라 감 *고유번호\r\n    };\r\n\r\n    // li 삭제 버튼 클릭 시 호출되는 함수\r\n    const handleDeleteButtonClick = (id: any) => {\r\n        const updatedListItems = listItems.filter(item => item.id !== id);\r\n        // listItems에서 id와 일치하는 아이템을 제외한 새로운 배열을 생성\r\n        // item.id !== id 조건을 만족하는 요소만 남겨둠\r\n        setListItems(updatedListItems);\r\n        // listItem의 배열 상태를 undatedListItems 배열로 업데이트 함\r\n    };\r\n\r\n    const onChageChecked = (e:any) => {\r\n        const id = Number(e.target.value);\r\n        setListItems(\r\n            listItems.map((item) =>\r\n                item.id === id ? { ...item, checked: !item.checked } : item\r\n            )\r\n        );\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        localStorageController.setItem(\"todolist\",listItems);\r\n        setListItems(listItems)\r\n    }, [listItems]);\r\n\r\n    return (\r\n        <t.Container>\r\n            <t.InputWrapper onSubmit={handleFormSubmit} \r\n            // onSubmit 은 form요소의 이벤트 핸들러 함수를 등록하는 것을 의미함\r\n            // form 요소에서 이벤트가 발생하면 기본적으로 페이지가 다시 로드 되는데 \r\n            // 이를 방지하고자 함수를 등록시킴\r\n            >\r\n                <t.TextField \r\n                    type=\"text\" \r\n                    placeholder= {props.placeholder}\r\n                    value={inputValue} // 변한 값을 저장함\r\n                    onChange={handleInputChange} // 사용자가 입력할 때 변하는 값을 받음\r\n                    onClick={handleClick}\r\n                />\r\n                <t.AddButton type=\"submit\">{props.btntxt}</t.AddButton>\r\n            </t.InputWrapper>\r\n            <t.ContentsWrapper id=\"todolistwrapper\">\r\n                {listItems.map((item: ListItem) => (\r\n                    <t.TodoItem  key={item}>\r\n                        <label>\r\n                            <input type=\"checkbox\"\r\n                                onChange={onChageChecked}\r\n                                checked={item.checked}\r\n                            />\r\n                            <span>\r\n                                {item.text}\r\n                                {item.inputDate && <em>{item.inputDate}</em>}\r\n                            </span>\r\n                        </label>\r\n                        <t.EditButton>수정</t.EditButton>\r\n                        <t.DelButton onClick={() => handleDeleteButtonClick(item.id)}>삭제</t.DelButton>\r\n                    </t.TodoItem>\r\n                ))}\r\n            </t.ContentsWrapper>\r\n        </t.Container>\r\n    );\r\n}\r\n\r\n\r\nexport default TabContents;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,OAAOC,sBAAsB,MAAM,uBAAuB;AAC1D,OAAO,KAAKC,CAAC,MAAM,wCAAwC;AAC3D,OAAOC,IAAI,MAAM,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQ7B,MAAMC,WAAW,GAAIC,KAAa,IAAK;EAAAC,EAAA;EACnC;EACA;;EAEA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAS,EAAE,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAS,EAAE,CAAC;EACtD;EACA;EACA,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAa,MAAM;IACzD,MAAMe,KAAwB,GAAGd,sBAAsB,CAACe,OAAO,CAAC,UAAU,CAAC;IAC3E,IAAID,KAAK,KAAK,IAAI,EAAE;MAChB,OAAOA,KAAK;IAChB,CAAC,MAAM;MACH,OAAO,EAAE,CAAC,CAAC;IACf;EAEJ,CAAC,CAAC;;EAEF;EACA,MAAM,CAACE,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAS,MAAM;IAC/C,MAAMmB,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGR,SAAS,CAACS,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,CAAC,CAAC;IAC3D,OAAOL,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAG,CAAC,GAAG,CAAC;EACpC,CAAC,CAAC;EAEF,MAAM,CAACM,OAAO,CAAC,GAAGzB,QAAQ,CAAU,KAAK,CAAC;;EAE1C;AACJ;AACA;AACA;AACA;AACA;EACI,MAAM0B,iBAAiB,GAAIC,CAAsC,IAAK;IAClEjB,aAAa,CAACiB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtB,MAAMC,WAAW,GAAG,IAAIC,IAAI,EAAE;IAC9B,MAAMC,aAAa,GAAGF,WAAW,CAACG,cAAc,CAAC,OAAO,EAAE;MACtDC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,SAAS;MAChBC,GAAG,EAAE,SAAS;MACdC,MAAM,EAAE,KAAK;MACbC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE;IACZ,CAAC,CAAC;IAEF5B,YAAY,CAACqB,aAAa,CAAC;EAC/B,CAAC;;EAED;EACA,MAAMQ,gBAAgB,GAAId,CAAmC,IAAK;IAC9DA,CAAC,CAACe,cAAc,EAAE,CAAC,CAAC;IACpB,MAAMC,OAAiB,GAAG;MAAEnB,EAAE,EAAErB,IAAI,EAAE;MAAEyC,IAAI,EAAEnC,UAAU;MAAEgB,OAAO,EAAGA,OAAO;MAAEd,SAAS,EAAEA;IAAS,CAAC;IAClG;IACA;IACA,IAAI,CAACgC,OAAO,CAACC,IAAI,CAACC,IAAI,EAAE,EAAE;MACtB;IACJ;IACA/B,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAE8B,OAAO,CAAC,CAAC,CAAC,CAAC;IACvC;;IAGAjC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;IACnBQ,SAAS,CAACD,MAAM,CAAC;IACjB;IACA;EACJ,CAAC;;EAED;EACA,MAAM6B,uBAAuB,GAAItB,EAAO,IAAK;IACzC,MAAMuB,gBAAgB,GAAGlC,SAAS,CAACmC,MAAM,CAACzB,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;IACjE;IACA;IACAV,YAAY,CAACiC,gBAAgB,CAAC;IAC9B;EACJ,CAAC;;EAED,MAAME,cAAc,GAAItB,CAAK,IAAK;IAC9B,MAAMH,EAAE,GAAG0B,MAAM,CAACvB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IACjCf,YAAY,CACRD,SAAS,CAACS,GAAG,CAAEC,IAAI,IACfA,IAAI,CAACC,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGD,IAAI;MAAEE,OAAO,EAAE,CAACF,IAAI,CAACE;IAAQ,CAAC,GAAGF,IAAI,CAC9D,CACJ;EACL,CAAC;EAGDxB,SAAS,CAAC,MAAM;IACZE,sBAAsB,CAACkD,OAAO,CAAC,UAAU,EAACtC,SAAS,CAAC;IACpDC,YAAY,CAACD,SAAS,CAAC;EAC3B,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,oBACIR,OAAA,CAACH,CAAC,CAACkD,SAAS;IAAAC,QAAA,gBACRhD,OAAA,CAACH,CAAC,CAACoD,YAAY;MAACC,QAAQ,EAAEd;MAC1B;MACA;MACA;MAAA;MAAAY,QAAA,gBAEIhD,OAAA,CAACH,CAAC,CAACsD,SAAS;QACRC,IAAI,EAAC,MAAM;QACXC,WAAW,EAAGnD,KAAK,CAACmD,WAAY;QAChC7B,KAAK,EAAEpB,UAAW,CAAC;QAAA;QACnBkD,QAAQ,EAAEjC,iBAAkB,CAAC;QAAA;QAC7BkC,OAAO,EAAE9B;MAAY;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACvB,eACF3D,OAAA,CAACH,CAAC,CAAC+D,SAAS;QAACR,IAAI,EAAC,QAAQ;QAAAJ,QAAA,EAAE9C,KAAK,CAAC2D;MAAM;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAe;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC1C,eACjB3D,OAAA,CAACH,CAAC,CAACiE,eAAe;MAAC3C,EAAE,EAAC,iBAAiB;MAAA6B,QAAA,EAClCxC,SAAS,CAACS,GAAG,CAAEC,IAAc,iBAC1BlB,OAAA,CAACH,CAAC,CAACkE,QAAQ;QAAAf,QAAA,gBACPhD,OAAA;UAAAgD,QAAA,gBACIhD,OAAA;YAAOoD,IAAI,EAAC,UAAU;YAClBE,QAAQ,EAAEV,cAAe;YACzBxB,OAAO,EAAEF,IAAI,CAACE;UAAQ;YAAAoC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QACxB,eACF3D,OAAA;YAAAgD,QAAA,GACK9B,IAAI,CAACqB,IAAI,EACTrB,IAAI,CAACZ,SAAS,iBAAIN,OAAA;cAAAgD,QAAA,EAAK9B,IAAI,CAACZ;YAAS;cAAAkD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,QAAM;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QACzC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACH,eACR3D,OAAA,CAACH,CAAC,CAACmE,UAAU;UAAAhB,QAAA,EAAC;QAAE;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAe,eAC/B3D,OAAA,CAACH,CAAC,CAACoE,SAAS;UAACV,OAAO,EAAEA,CAAA,KAAMd,uBAAuB,CAACvB,IAAI,CAACC,EAAE,CAAE;UAAA6B,QAAA,EAAC;QAAE;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAc;MAAA,GAZhEzC,IAAI;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAczB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACc;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACV;AAEtB,CAAC;AAAAxD,EAAA,CAjIKF,WAAW;AAAAiE,EAAA,GAAXjE,WAAW;AAoIjB,eAAeA,WAAW;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}